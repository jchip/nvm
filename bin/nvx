#!/bin/sh

# nvx - Execute commands with local node_modules/.bin in PATH

# Check for help flag
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
  cat << EOF
nvx - Execute commands with local node_modules/.bin in PATH

Usage:
  nvx <command> [args...]        Execute command with ./node_modules/.bin in PATH
  nvx --install-to-user          Add nvm/bin to user PATH (current user, works with GUI apps)
  nvx --install-to-system        Add nvm/bin to system PATH (all users, requires sudo)
  nvx --help, -h                 Show this help message

Examples:
  nvx eslint src/                Run eslint from local node_modules
  nvx prettier --write .         Run prettier from local node_modules
  nvx --install-to-user          Install nvm/bin to current user's PATH
  sudo nvx --install-to-system   Install nvm/bin to system PATH (all users)
EOF
  exit 0
fi

# Check for --install-to-user flag
if [ "$1" = "--install-to-user" ]; then
  # Detect NVM_HOME from script location
  SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd -P)"
  DETECTED_NVM_HOME="$(dirname "$SCRIPT_DIR")"

  # Use NVM_HOME env var if set, otherwise use detected path
  if [ -n "$NVM_HOME" ]; then
    NVM_BIN_PATH="${NVM_HOME}/bin"
  else
    NVM_BIN_PATH="${DETECTED_NVM_HOME}/bin"
  fi

  # Check OS type
  OS_TYPE="$(uname)"

  if [ "$OS_TYPE" = "Darwin" ]; then
    # macOS: Create a LaunchAgent to set PATH for all user processes including GUI
    LAUNCH_AGENTS_DIR="$HOME/Library/LaunchAgents"
    PLIST_FILE="$LAUNCH_AGENTS_DIR/com.uninvm.path.plist"

    # Create LaunchAgents directory if it doesn't exist
    mkdir -p "$LAUNCH_AGENTS_DIR" 2>/dev/null

    # Create the LaunchAgent plist
    cat > "$PLIST_FILE" << PLIST_EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.uninvm.path</string>
  <key>ProgramArguments</key>
  <array>
    <string>sh</string>
    <string>-c</string>
    <string>launchctl setenv PATH "$NVM_BIN_PATH:\$PATH"</string>
  </array>
  <key>RunAtLoad</key>
  <true/>
</dict>
</plist>
PLIST_EOF

    if [ $? -eq 0 ]; then
      # Load the LaunchAgent
      launchctl unload "$PLIST_FILE" 2>/dev/null
      launchctl load "$PLIST_FILE" 2>/dev/null

      echo "Successfully configured user PATH"
      echo "Created LaunchAgent at $PLIST_FILE"
      echo "Configured to add $NVM_BIN_PATH to PATH on login"
      echo ""
      echo "Log out and log back in for changes to take effect"
      exit 0
    else
      echo "Error: Failed to create LaunchAgent" >&2
      exit 1
    fi

  elif [ "$OS_TYPE" = "Linux" ]; then
    # Linux: Use systemd user environment.d
    SYSTEMD_ENV_DIR="$HOME/.config/environment.d"
    ENV_FILE="$SYSTEMD_ENV_DIR/10-uninvm.conf"

    # Check if already installed
    if [ -f "$ENV_FILE" ] && grep -q "$NVM_BIN_PATH" "$ENV_FILE" 2>/dev/null; then
      echo "$NVM_BIN_PATH is already in user PATH"
      exit 0
    fi

    # Create directory if it doesn't exist
    mkdir -p "$SYSTEMD_ENV_DIR" 2>/dev/null

    # Create the environment file
    cat > "$ENV_FILE" << ENV_EOF
# Add uni-nvm bin directory to PATH
PATH=$NVM_BIN_PATH:\$PATH
ENV_EOF

    if [ $? -eq 0 ]; then
      echo "Successfully configured user PATH"
      echo "Created environment file at $ENV_FILE"
      echo "Configured to add $NVM_BIN_PATH to PATH on login"
      echo ""
      echo "Log out and log back in for changes to take effect"
      exit 0
    else
      echo "Error: Failed to create environment file" >&2
      exit 1
    fi

  else
    echo "Error: --install-to-user is only supported on macOS and Linux" >&2
    echo "Detected OS: $OS_TYPE" >&2
    exit 1
  fi
fi

# Check for --install-to-system flag
if [ "$1" = "--install-to-system" ]; then
  # Detect NVM_HOME from script location
  # Get the directory where this script is located
  SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd -P)"
  # NVM_HOME is the parent directory of bin/
  DETECTED_NVM_HOME="$(dirname "$SCRIPT_DIR")"

  # Use NVM_HOME env var if set, otherwise use detected path
  if [ -n "$NVM_HOME" ]; then
    NVM_BIN_PATH="${NVM_HOME}/bin"
  else
    NVM_BIN_PATH="${DETECTED_NVM_HOME}/bin"
  fi

  # Get the full path to this script for sudo command
  SCRIPT_PATH="$(cd "$(dirname "$0")" && pwd -P)/$(basename "$0")"

  # Check OS type
  OS_TYPE="$(uname)"

  if [ "$OS_TYPE" = "Darwin" ]; then
    # macOS: use /etc/paths.d
    PATHS_DIR="/etc/paths.d"
    PATHS_FILE="$PATHS_DIR/999-uni-nvm"

    # Check if /etc/paths.d exists
    if [ ! -d "$PATHS_DIR" ]; then
      echo "Error: $PATHS_DIR directory does not exist" >&2
      echo "" >&2
      echo "This feature requires /etc/paths.d which is standard on macOS." >&2
      echo "Please ensure you are running a standard macOS installation." >&2
      exit 1
    fi

    # Try to write to /etc/paths.d/
    if echo "$NVM_BIN_PATH" > "$PATHS_FILE" 2>/dev/null; then
      echo "Successfully installed to system PATH"
      echo "Added $NVM_BIN_PATH to $PATHS_FILE"
      echo "You may need to restart your terminal for changes to take effect"
      exit 0
    else
      echo "Error: Permission denied writing to $PATHS_FILE" >&2
      echo "" >&2
      echo "Please run this command with sudo:" >&2
      echo "  sudo \"$SCRIPT_PATH\" --install-to-system" >&2
      exit 1
    fi

  elif [ "$OS_TYPE" = "Linux" ]; then
    # Linux: update /etc/environment for system-wide PATH (works for GUI apps too)
    ENV_FILE="/etc/environment"

    if [ ! -f "$ENV_FILE" ]; then
      echo "Error: $ENV_FILE does not exist" >&2
      echo "" >&2
      echo "This feature requires /etc/environment which is standard on most Linux distributions." >&2
      exit 1
    fi

    # Check if already in /etc/environment
    if grep -q "$NVM_BIN_PATH" "$ENV_FILE" 2>/dev/null; then
      echo "$NVM_BIN_PATH is already in system PATH"
      exit 0
    fi

    # Read current PATH from /etc/environment
    CURRENT_PATH=$(grep -E '^PATH=' "$ENV_FILE" 2>/dev/null | sed 's/^PATH=//' | sed 's/"//g')

    if [ -z "$CURRENT_PATH" ]; then
      # No PATH line exists, create one
      NEW_PATH_LINE="PATH=\"$NVM_BIN_PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\""
    else
      # PATH exists, prepend our path
      NEW_PATH_LINE="PATH=\"$NVM_BIN_PATH:$CURRENT_PATH\""
    fi

    # Create a temporary file with the updated content
    TMP_FILE=$(mktemp 2>/dev/null) || TMP_FILE="/tmp/uni-nvm-env.$$"

    if grep -v -E '^PATH=' "$ENV_FILE" > "$TMP_FILE" 2>/dev/null && echo "$NEW_PATH_LINE" >> "$TMP_FILE" 2>/dev/null; then
      # Try to write back to /etc/environment
      if cat "$TMP_FILE" > "$ENV_FILE" 2>/dev/null; then
        rm -f "$TMP_FILE"
        echo "Successfully installed to system PATH"
        echo "Added $NVM_BIN_PATH to $ENV_FILE"
        echo "You may need to log out and log back in for changes to take effect"
        exit 0
      else
        rm -f "$TMP_FILE"
        echo "Error: Permission denied writing to $ENV_FILE" >&2
        echo "" >&2
        echo "Please run this command with sudo:" >&2
        echo "  sudo \"$SCRIPT_PATH\" --install-to-system" >&2
        exit 1
      fi
    else
      rm -f "$TMP_FILE" 2>/dev/null
      echo "Error: Failed to update $ENV_FILE" >&2
      exit 1
    fi

  else
    echo "Error: --install-to-system is only supported on macOS and Linux" >&2
    echo "Detected OS: $OS_TYPE" >&2
    exit 1
  fi
fi

# Check if there are no remaining arguments - show help
if [ $# -eq 0 ]; then
  echo "Error: nvx requires a command to execute" >&2
  echo "" >&2
  cat << EOF
nvx - Execute commands with local node_modules/.bin in PATH

Usage:
  nvx <command> [args...]        Execute command with ./node_modules/.bin in PATH
  nvx --install-to-user          Add nvm/bin to user PATH (current user, works with GUI apps)
  nvx --install-to-system        Add nvm/bin to system PATH (all users, requires sudo)
  nvx --help, -h                 Show this help message

Examples:
  nvx eslint src/                Run eslint from local node_modules
  nvx prettier --write .         Run prettier from local node_modules
  nvx --install-to-user          Install nvm/bin to current user's PATH
  sudo nvx --install-to-system   Install nvm/bin to system PATH (all users)
EOF
  exit 1
fi

# Check if ./node_modules/.bin exists
if [ -d "./node_modules/.bin" ]; then
  # Resolve to absolute path using cd and pwd
  BIN_PATH="$(cd "./node_modules/.bin" 2>/dev/null && pwd -P)"

  # If we got an absolute path, use it; otherwise fall back to relative
  if [ -n "$BIN_PATH" ]; then
    export PATH="$BIN_PATH:$PATH"
  else
    # Fallback to relative path if absolute resolution fails
    # (shouldn't happen if directory exists, but handle it just in case)
    export PATH="./node_modules/.bin:$PATH"
  fi
fi


# Execute the remaining arguments as a command
exec "$@"
